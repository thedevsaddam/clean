// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/thedevsaddam/clean/domain"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserUsecase) Delete(ctx context.Context, id uint) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx, ctr
func (_m *UserUsecase) Fetch(ctx context.Context, ctr *domain.UserCriteria) ([]*domain.User, error) {
	ret := _m.Called(ctx, ctr)

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserCriteria) []*domain.User); ok {
		r0 = rf(ctx, ctr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserCriteria) error); ok {
		r1 = rf(ctx, ctr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetByID(ctx context.Context, id uint) (*domain.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, uint) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, user
func (_m *UserUsecase) Store(ctx context.Context, user *domain.User) (uint, error) {
	ret := _m.Called(ctx, user)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) uint); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
